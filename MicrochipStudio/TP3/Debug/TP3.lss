
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000007b8  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800112  00800112  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181a  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae3  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfa  00000000  00000000  00002d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe9  00000000  00000000  000043a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000538d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e8 eb       	ldi	r30, 0xB8	; 184
  bc:	f7 e0       	ldi	r31, 0x07	; 7
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 31       	cpi	r26, 0x12	; 18
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a2 e1       	ldi	r26, 0x12	; 18
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a0 32       	cpi	r26, 0x20	; 32
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
  de:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <LCDsendChar>:
		}
		
		// write character to display
		LCDsendChar(c);
	}	
}
  e6:	65 b1       	in	r22, 0x05	; 5
  e8:	98 2f       	mov	r25, r24
  ea:	90 74       	andi	r25, 0x40	; 64
  ec:	49 2f       	mov	r20, r25
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	55 95       	asr	r21
  f2:	47 95       	ror	r20
  f4:	55 95       	asr	r21
  f6:	47 95       	ror	r20
  f8:	55 95       	asr	r21
  fa:	47 95       	ror	r20
  fc:	55 95       	asr	r21
  fe:	47 95       	ror	r20
 100:	98 2f       	mov	r25, r24
 102:	90 78       	andi	r25, 0x80	; 128
 104:	29 2f       	mov	r18, r25
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	23 2f       	mov	r18, r19
 10c:	00 0c       	add	r0, r0
 10e:	22 1f       	adc	r18, r18
 110:	33 0b       	sbc	r19, r19
 112:	00 0c       	add	r0, r0
 114:	22 1f       	adc	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	96 2f       	mov	r25, r22
 11a:	99 7f       	andi	r25, 0xF9	; 249
 11c:	49 2b       	or	r20, r25
 11e:	24 2b       	or	r18, r20
 120:	25 b9       	out	0x05, r18	; 5
 122:	68 b1       	in	r22, 0x08	; 8
 124:	98 2f       	mov	r25, r24
 126:	90 71       	andi	r25, 0x10	; 16
 128:	49 2f       	mov	r20, r25
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	55 95       	asr	r21
 12e:	47 95       	ror	r20
 130:	55 95       	asr	r21
 132:	47 95       	ror	r20
 134:	55 95       	asr	r21
 136:	47 95       	ror	r20
 138:	98 2f       	mov	r25, r24
 13a:	90 72       	andi	r25, 0x20	; 32
 13c:	29 2f       	mov	r18, r25
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	35 95       	asr	r19
 146:	27 95       	ror	r18
 148:	35 95       	asr	r19
 14a:	27 95       	ror	r18
 14c:	96 2f       	mov	r25, r22
 14e:	99 7f       	andi	r25, 0xF9	; 249
 150:	49 2b       	or	r20, r25
 152:	24 2b       	or	r18, r20
 154:	28 b9       	out	0x08, r18	; 8
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	92 60       	ori	r25, 0x02	; 2
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	91 60       	ori	r25, 0x01	; 1
 160:	9b b9       	out	0x0b, r25	; 11
 162:	25 ed       	ldi	r18, 0xD5	; 213
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDsendChar+0x7e>
 168:	00 00       	nop
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	9e 7f       	andi	r25, 0xFE	; 254
 16e:	9b b9       	out	0x0b, r25	; 11
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	9d 7f       	andi	r25, 0xFD	; 253
 174:	9b b9       	out	0x0b, r25	; 11
 176:	95 ed       	ldi	r25, 0xD5	; 213
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDsendChar+0x92>
 17c:	00 00       	nop
 17e:	65 b1       	in	r22, 0x05	; 5
 180:	20 e1       	ldi	r18, 0x10	; 16
 182:	82 9f       	mul	r24, r18
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	ac 01       	movw	r20, r24
 18a:	40 74       	andi	r20, 0x40	; 64
 18c:	55 27       	eor	r21, r21
 18e:	55 95       	asr	r21
 190:	47 95       	ror	r20
 192:	55 95       	asr	r21
 194:	47 95       	ror	r20
 196:	55 95       	asr	r21
 198:	47 95       	ror	r20
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	9c 01       	movw	r18, r24
 1a0:	20 78       	andi	r18, 0x80	; 128
 1a2:	33 27       	eor	r19, r19
 1a4:	02 2e       	mov	r0, r18
 1a6:	23 2f       	mov	r18, r19
 1a8:	00 0c       	add	r0, r0
 1aa:	22 1f       	adc	r18, r18
 1ac:	33 0b       	sbc	r19, r19
 1ae:	00 0c       	add	r0, r0
 1b0:	22 1f       	adc	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	36 2f       	mov	r19, r22
 1b6:	39 7f       	andi	r19, 0xF9	; 249
 1b8:	43 2b       	or	r20, r19
 1ba:	24 2b       	or	r18, r20
 1bc:	25 b9       	out	0x05, r18	; 5
 1be:	48 b1       	in	r20, 0x08	; 8
 1c0:	9c 01       	movw	r18, r24
 1c2:	20 71       	andi	r18, 0x10	; 16
 1c4:	33 27       	eor	r19, r19
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	35 95       	asr	r19
 1d0:	27 95       	ror	r18
 1d2:	80 72       	andi	r24, 0x20	; 32
 1d4:	99 27       	eor	r25, r25
 1d6:	95 95       	asr	r25
 1d8:	87 95       	ror	r24
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	94 2f       	mov	r25, r20
 1e4:	99 7f       	andi	r25, 0xF9	; 249
 1e6:	29 2b       	or	r18, r25
 1e8:	82 2b       	or	r24, r18
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	85 ed       	ldi	r24, 0xD5	; 213
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDsendChar+0x114>
 1fe:	00 00       	nop
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	8b b9       	out	0x0b, r24	; 11
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	95 ed       	ldi	r25, 0xD5	; 213
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDsendChar+0x128>
 212:	00 00       	nop
 214:	08 95       	ret

00000216 <LCDsendCommand>:
 216:	65 b1       	in	r22, 0x05	; 5
 218:	98 2f       	mov	r25, r24
 21a:	90 74       	andi	r25, 0x40	; 64
 21c:	49 2f       	mov	r20, r25
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	55 95       	asr	r21
 222:	47 95       	ror	r20
 224:	55 95       	asr	r21
 226:	47 95       	ror	r20
 228:	55 95       	asr	r21
 22a:	47 95       	ror	r20
 22c:	55 95       	asr	r21
 22e:	47 95       	ror	r20
 230:	98 2f       	mov	r25, r24
 232:	90 78       	andi	r25, 0x80	; 128
 234:	29 2f       	mov	r18, r25
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	23 2f       	mov	r18, r19
 23c:	00 0c       	add	r0, r0
 23e:	22 1f       	adc	r18, r18
 240:	33 0b       	sbc	r19, r19
 242:	00 0c       	add	r0, r0
 244:	22 1f       	adc	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	96 2f       	mov	r25, r22
 24a:	99 7f       	andi	r25, 0xF9	; 249
 24c:	49 2b       	or	r20, r25
 24e:	24 2b       	or	r18, r20
 250:	25 b9       	out	0x05, r18	; 5
 252:	68 b1       	in	r22, 0x08	; 8
 254:	98 2f       	mov	r25, r24
 256:	90 71       	andi	r25, 0x10	; 16
 258:	49 2f       	mov	r20, r25
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	55 95       	asr	r21
 262:	47 95       	ror	r20
 264:	55 95       	asr	r21
 266:	47 95       	ror	r20
 268:	98 2f       	mov	r25, r24
 26a:	90 72       	andi	r25, 0x20	; 32
 26c:	29 2f       	mov	r18, r25
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	35 95       	asr	r19
 276:	27 95       	ror	r18
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	96 2f       	mov	r25, r22
 27e:	99 7f       	andi	r25, 0xF9	; 249
 280:	49 2b       	or	r20, r25
 282:	24 2b       	or	r18, r20
 284:	28 b9       	out	0x08, r18	; 8
 286:	9b b1       	in	r25, 0x0b	; 11
 288:	91 60       	ori	r25, 0x01	; 1
 28a:	9b b9       	out	0x0b, r25	; 11
 28c:	ef e9       	ldi	r30, 0x9F	; 159
 28e:	ff e0       	ldi	r31, 0x0F	; 15
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCDsendCommand+0x7a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCDsendCommand+0x80>
 296:	00 00       	nop
 298:	9b b1       	in	r25, 0x0b	; 11
 29a:	9e 7f       	andi	r25, 0xFE	; 254
 29c:	9b b9       	out	0x0b, r25	; 11
 29e:	ef e9       	ldi	r30, 0x9F	; 159
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDsendCommand+0x8c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCDsendCommand+0x92>
 2a8:	00 00       	nop
 2aa:	65 b1       	in	r22, 0x05	; 5
 2ac:	f0 e1       	ldi	r31, 0x10	; 16
 2ae:	8f 9f       	mul	r24, r31
 2b0:	c0 01       	movw	r24, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	ac 01       	movw	r20, r24
 2b6:	40 74       	andi	r20, 0x40	; 64
 2b8:	55 27       	eor	r21, r21
 2ba:	55 95       	asr	r21
 2bc:	47 95       	ror	r20
 2be:	55 95       	asr	r21
 2c0:	47 95       	ror	r20
 2c2:	55 95       	asr	r21
 2c4:	47 95       	ror	r20
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	9c 01       	movw	r18, r24
 2cc:	20 78       	andi	r18, 0x80	; 128
 2ce:	33 27       	eor	r19, r19
 2d0:	02 2e       	mov	r0, r18
 2d2:	23 2f       	mov	r18, r19
 2d4:	00 0c       	add	r0, r0
 2d6:	22 1f       	adc	r18, r18
 2d8:	33 0b       	sbc	r19, r19
 2da:	00 0c       	add	r0, r0
 2dc:	22 1f       	adc	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	36 2f       	mov	r19, r22
 2e2:	39 7f       	andi	r19, 0xF9	; 249
 2e4:	43 2b       	or	r20, r19
 2e6:	24 2b       	or	r18, r20
 2e8:	25 b9       	out	0x05, r18	; 5
 2ea:	48 b1       	in	r20, 0x08	; 8
 2ec:	9c 01       	movw	r18, r24
 2ee:	20 71       	andi	r18, 0x10	; 16
 2f0:	33 27       	eor	r19, r19
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	35 95       	asr	r19
 2f8:	27 95       	ror	r18
 2fa:	35 95       	asr	r19
 2fc:	27 95       	ror	r18
 2fe:	80 72       	andi	r24, 0x20	; 32
 300:	99 27       	eor	r25, r25
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	94 2f       	mov	r25, r20
 310:	99 7f       	andi	r25, 0xF9	; 249
 312:	29 2b       	or	r18, r25
 314:	82 2b       	or	r24, r18
 316:	88 b9       	out	0x08, r24	; 8
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	8f e9       	ldi	r24, 0x9F	; 159
 320:	9f e0       	ldi	r25, 0x0F	; 15
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCDsendCommand+0x10c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCDsendCommand+0x112>
 328:	00 00       	nop
 32a:	8b b1       	in	r24, 0x0b	; 11
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	8b b9       	out	0x0b, r24	; 11
 330:	ef e9       	ldi	r30, 0x9F	; 159
 332:	ff e0       	ldi	r31, 0x0F	; 15
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCDsendCommand+0x11e>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCDsendCommand+0x124>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <LCDclr>:
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 344:	08 95       	ret

00000346 <LCDhome>:
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 34c:	08 95       	ret

0000034e <LCDstring>:
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 97       	sbiw	r24, 0x00	; 0
 358:	69 f0       	breq	.+26     	; 0x374 <LCDstring+0x26>
 35a:	d6 2f       	mov	r29, r22
 35c:	8c 01       	movw	r16, r24
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	07 c0       	rjmp	.+14     	; 0x370 <LCDstring+0x22>
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	f1 1d       	adc	r31, r1
 368:	80 81       	ld	r24, Z
 36a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 36e:	cf 5f       	subi	r28, 0xFF	; 255
 370:	cd 17       	cp	r28, r29
 372:	b8 f3       	brcs	.-18     	; 0x362 <LCDstring+0x14>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <LCDGotoXY>:
 37e:	62 30       	cpi	r22, 0x02	; 2
 380:	31 f0       	breq	.+12     	; 0x38e <LCDGotoXY+0x10>
 382:	63 30       	cpi	r22, 0x03	; 3
 384:	31 f0       	breq	.+12     	; 0x392 <LCDGotoXY+0x14>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	29 f4       	brne	.+10     	; 0x394 <LCDGotoXY+0x16>
 38a:	80 5c       	subi	r24, 0xC0	; 192
 38c:	03 c0       	rjmp	.+6      	; 0x394 <LCDGotoXY+0x16>
 38e:	8c 5e       	subi	r24, 0xEC	; 236
 390:	01 c0       	rjmp	.+2      	; 0x394 <LCDGotoXY+0x16>
 392:	8c 5a       	subi	r24, 0xAC	; 172
 394:	80 68       	ori	r24, 0x80	; 128
 396:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 39a:	08 95       	ret

0000039c <LCDdefinechar>:
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	7c 01       	movw	r14, r24
 3aa:	86 2f       	mov	r24, r22
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	80 64       	ori	r24, 0x40	; 64
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <LCDdefinechar+0x40>
 3c2:	f7 01       	movw	r30, r14
 3c4:	ec 0f       	add	r30, r28
 3c6:	fd 1f       	adc	r31, r29
 3c8:	14 91       	lpm	r17, Z
 3ca:	01 e0       	ldi	r16, 0x01	; 1
 3cc:	08 0f       	add	r16, r24
 3ce:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 3d2:	81 2f       	mov	r24, r17
 3d4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 3d8:	21 96       	adiw	r28, 0x01	; 1
 3da:	80 2f       	mov	r24, r16
 3dc:	c8 30       	cpi	r28, 0x08	; 8
 3de:	d1 05       	cpc	r29, r1
 3e0:	80 f3       	brcs	.-32     	; 0x3c2 <LCDdefinechar+0x26>
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	08 95       	ret

000003f0 <LCDinit>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	8f e5       	ldi	r24, 0x5F	; 95
 3f6:	9a ee       	ldi	r25, 0xEA	; 234
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCDinit+0x8>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCDinit+0xe>
 3fe:	00 00       	nop
 400:	85 b1       	in	r24, 0x05	; 5
 402:	89 7f       	andi	r24, 0xF9	; 249
 404:	85 b9       	out	0x05, r24	; 5
 406:	88 b1       	in	r24, 0x08	; 8
 408:	89 7f       	andi	r24, 0xF9	; 249
 40a:	88 b9       	out	0x08, r24	; 8
 40c:	1b b8       	out	0x0b, r1	; 11
 40e:	87 b1       	in	r24, 0x07	; 7
 410:	86 60       	ori	r24, 0x06	; 6
 412:	87 b9       	out	0x07, r24	; 7
 414:	84 b1       	in	r24, 0x04	; 4
 416:	86 60       	ori	r24, 0x06	; 6
 418:	84 b9       	out	0x04, r24	; 4
 41a:	84 b1       	in	r24, 0x04	; 4
 41c:	86 60       	ori	r24, 0x06	; 6
 41e:	84 b9       	out	0x04, r24	; 4
 420:	87 b1       	in	r24, 0x07	; 7
 422:	86 60       	ori	r24, 0x06	; 6
 424:	87 b9       	out	0x07, r24	; 7
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	83 60       	ori	r24, 0x03	; 3
 42a:	8a b9       	out	0x0a, r24	; 10
 42c:	85 b1       	in	r24, 0x05	; 5
 42e:	89 7f       	andi	r24, 0xF9	; 249
 430:	85 b9       	out	0x05, r24	; 5
 432:	88 b1       	in	r24, 0x08	; 8
 434:	86 60       	ori	r24, 0x06	; 6
 436:	88 b9       	out	0x08, r24	; 8
 438:	8b b1       	in	r24, 0x0b	; 11
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	8b b9       	out	0x0b, r24	; 11
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
 44a:	8b b1       	in	r24, 0x0b	; 11
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	8b b9       	out	0x0b, r24	; 11
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	89 7f       	andi	r24, 0xF9	; 249
 460:	85 b9       	out	0x05, r24	; 5
 462:	88 b1       	in	r24, 0x08	; 8
 464:	86 60       	ori	r24, 0x06	; 6
 466:	88 b9       	out	0x08, r24	; 8
 468:	8b b1       	in	r24, 0x0b	; 11
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	8b b9       	out	0x0b, r24	; 11
 46e:	8f e9       	ldi	r24, 0x9F	; 159
 470:	9f e0       	ldi	r25, 0x0F	; 15
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
 47a:	8b b1       	in	r24, 0x0b	; 11
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	8b b9       	out	0x0b, r24	; 11
 480:	8f e9       	ldi	r24, 0x9F	; 159
 482:	9f e0       	ldi	r25, 0x0F	; 15
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	89 7f       	andi	r24, 0xF9	; 249
 490:	85 b9       	out	0x05, r24	; 5
 492:	88 b1       	in	r24, 0x08	; 8
 494:	89 7f       	andi	r24, 0xF9	; 249
 496:	84 60       	ori	r24, 0x04	; 4
 498:	88 b9       	out	0x08, r24	; 8
 49a:	8b b1       	in	r24, 0x0b	; 11
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	8b b9       	out	0x0b, r24	; 11
 4a0:	8f e9       	ldi	r24, 0x9F	; 159
 4a2:	9f e0       	ldi	r25, 0x0F	; 15
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
 4ac:	8b b1       	in	r24, 0x0b	; 11
 4ae:	8e 7f       	andi	r24, 0xFE	; 254
 4b0:	8b b9       	out	0x0b, r24	; 11
 4b2:	8f e9       	ldi	r24, 0x9F	; 159
 4b4:	9f e0       	ldi	r25, 0x0F	; 15
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
 4be:	88 e2       	ldi	r24, 0x28	; 40
 4c0:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	0e 94 0b 01 	call	0x216	; 0x216 <LCDsendCommand>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4d0:	d1 e0       	ldi	r29, 0x01	; 1
 4d2:	d6 0f       	add	r29, r22
 4d4:	8c 2f       	mov	r24, r28
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	88 59       	subi	r24, 0x98	; 152
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDdefinechar>
 4e0:	c8 5f       	subi	r28, 0xF8	; 248
 4e2:	6d 2f       	mov	r22, r29
 4e4:	c0 34       	cpi	r28, 0x40	; 64
 4e6:	a0 f3       	brcs	.-24     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <LCDescribeDato>:
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <LCDescribeDato+0xe>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <LCDescribeDato+0x10>
 4fe:	1f 92       	push	r1
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	7b 01       	movw	r14, r22
 506:	fe 01       	movw	r30, r28
 508:	31 96       	adiw	r30, 0x01	; 1
 50a:	25 e0       	ldi	r18, 0x05	; 5
 50c:	df 01       	movw	r26, r30
 50e:	1d 92       	st	X+, r1
 510:	2a 95       	dec	r18
 512:	e9 f7       	brne	.-6      	; 0x50e <LCDescribeDato+0x20>
 514:	24 e0       	ldi	r18, 0x04	; 4
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	0f c0       	rjmp	.+30     	; 0x538 <LCDescribeDato+0x4a>
 51a:	6a e0       	ldi	r22, 0x0A	; 10
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	0e 94 b2 03 	call	0x764	; 0x764 <__divmodhi4>
 522:	e1 e0       	ldi	r30, 0x01	; 1
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	ec 0f       	add	r30, r28
 528:	fd 1f       	adc	r31, r29
 52a:	e2 0f       	add	r30, r18
 52c:	f3 1f       	adc	r31, r19
 52e:	80 83       	st	Z, r24
 530:	86 2f       	mov	r24, r22
 532:	97 2f       	mov	r25, r23
 534:	21 50       	subi	r18, 0x01	; 1
 536:	31 09       	sbc	r19, r1
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	79 f7       	brne	.-34     	; 0x51a <LCDescribeDato+0x2c>
 53c:	bf ef       	ldi	r27, 0xFF	; 255
 53e:	eb 16       	cp	r14, r27
 540:	fb 06       	cpc	r15, r27
 542:	81 f4       	brne	.+32     	; 0x564 <LCDescribeDato+0x76>
 544:	03 c0       	rjmp	.+6      	; 0x54c <LCDescribeDato+0x5e>
 546:	0f 5f       	subi	r16, 0xFF	; 255
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	02 c0       	rjmp	.+4      	; 0x550 <LCDescribeDato+0x62>
 54c:	00 e0       	ldi	r16, 0x00	; 0
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ec 0f       	add	r30, r28
 556:	fd 1f       	adc	r31, r29
 558:	e0 0f       	add	r30, r16
 55a:	f1 1f       	adc	r31, r17
 55c:	20 81       	ld	r18, Z
 55e:	22 23       	and	r18, r18
 560:	91 f3       	breq	.-28     	; 0x546 <LCDescribeDato+0x58>
 562:	04 c0       	rjmp	.+8      	; 0x56c <LCDescribeDato+0x7e>
 564:	05 e0       	ldi	r16, 0x05	; 5
 566:	10 e0       	ldi	r17, 0x00	; 0
 568:	0e 19       	sub	r16, r14
 56a:	1f 09       	sbc	r17, r15
 56c:	99 23       	and	r25, r25
 56e:	84 f4       	brge	.+32     	; 0x590 <LCDescribeDato+0xa2>
 570:	8d e2       	ldi	r24, 0x2D	; 45
 572:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 576:	0c c0       	rjmp	.+24     	; 0x590 <LCDescribeDato+0xa2>
 578:	e1 e0       	ldi	r30, 0x01	; 1
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	ec 0f       	add	r30, r28
 57e:	fd 1f       	adc	r31, r29
 580:	e0 0f       	add	r30, r16
 582:	f1 1f       	adc	r31, r17
 584:	80 81       	ld	r24, Z
 586:	80 5d       	subi	r24, 0xD0	; 208
 588:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 58c:	0f 5f       	subi	r16, 0xFF	; 255
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	05 30       	cpi	r16, 0x05	; 5
 592:	11 05       	cpc	r17, r1
 594:	8c f3       	brlt	.-30     	; 0x578 <LCDescribeDato+0x8a>
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	08 95       	ret

000005ae <LCD_Init>:

void LCD_Init() {
	LCDinit();
 5ae:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCDinit>
	LCDclr();
 5b2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
	LCDhome();
 5b6:	0e 94 a3 01 	call	0x346	; 0x346 <LCDhome>
 5ba:	08 95       	ret

000005bc <main>:
// Archivos creados para este programa
#include "SensorT.h"

int main(void)
{
	LCD_Init();
 5bc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LCD_Init>
	
    uint32_t TyRH;
	uint8_t T, RH, i;
    while (1) 
    {
		TyRH = GetDato();
 5c0:	0e 94 1e 03 	call	0x63c	; 0x63c <GetDato>
		//TyRH = 0b00110011100101100111111010000001;
		
		T = (TyRH >> 8) & 0xFF;
 5c4:	87 2e       	mov	r8, r23
 5c6:	98 2e       	mov	r9, r24
 5c8:	a9 2e       	mov	r10, r25
 5ca:	bb 24       	eor	r11, r11
		RH = (TyRH >> 24) & 0xFF;
 5cc:	c9 2e       	mov	r12, r25
 5ce:	dd 24       	eor	r13, r13
 5d0:	ee 24       	eor	r14, r14
 5d2:	ff 24       	eor	r15, r15
// 		LCDGotoXY(0,1);
// 		for (i=16;i>0;i--){
// 			LCDescribeDato((TyRH>>(i-1))&1,1);
// 		}
		
		LCDclr();
 5d4:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDclr>
		LCDGotoXY(0,0);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
 		LCDstring("TEMP: ",6);
 5e0:	66 e0       	ldi	r22, 0x06	; 6
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDstring>
 		LCDescribeDato(T,3);
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	88 2d       	mov	r24, r8
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCDescribeDato>
 		LCDstring(" C",2);
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDstring>
 		LCDGotoXY(0,1);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
 		LCDstring("HUM: ",5);
 608:	65 e0       	ldi	r22, 0x05	; 5
 60a:	8a e0       	ldi	r24, 0x0A	; 10
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDstring>
 		LCDescribeDato(RH,3);
 612:	63 e0       	ldi	r22, 0x03	; 3
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	8c 2d       	mov	r24, r12
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCDescribeDato>
 		LCDstring("%",1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	80 e1       	ldi	r24, 0x10	; 16
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	2f ef       	ldi	r18, 0xFF	; 255
 62a:	83 ed       	ldi	r24, 0xD3	; 211
 62c:	90 e3       	ldi	r25, 0x30	; 48
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	80 40       	sbci	r24, 0x00	; 0
 632:	90 40       	sbci	r25, 0x00	; 0
 634:	e1 f7       	brne	.-8      	; 0x62e <main+0x72>
 636:	00 c0       	rjmp	.+0      	; 0x638 <main+0x7c>
 638:	00 00       	nop
 63a:	c2 cf       	rjmp	.-124    	; 0x5c0 <main+0x4>

0000063c <GetDato>:

uint32_t GetDato(){
	int8_t i=0;
	uint32_t res=0;
	
	DDRC |= (1<<PINC0); // Se establece el PINC0 como salida
 63c:	87 b1       	in	r24, 0x07	; 7
 63e:	81 60       	ori	r24, 0x01	; 1
 640:	87 b9       	out	0x07, r24	; 7
 	PORTC |= (1<<PINC0);// Se pone un valor 1
 642:	88 b1       	in	r24, 0x08	; 8
 644:	81 60       	ori	r24, 0x01	; 1
 646:	88 b9       	out	0x08, r24	; 8
 648:	8f e1       	ldi	r24, 0x1F	; 31
 64a:	9e e4       	ldi	r25, 0x4E	; 78
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <GetDato+0x10>
 650:	00 c0       	rjmp	.+0      	; 0x652 <GetDato+0x16>
 652:	00 00       	nop
 	_delay_ms(5);
	PORTC &= ~(1<<PINC0);
 654:	88 b1       	in	r24, 0x08	; 8
 656:	8e 7f       	andi	r24, 0xFE	; 254
 658:	88 b9       	out	0x08, r24	; 8
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	29 ef       	ldi	r18, 0xF9	; 249
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	91 50       	subi	r25, 0x01	; 1
 662:	20 40       	sbci	r18, 0x00	; 0
 664:	30 40       	sbci	r19, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <GetDato+0x24>
 668:	00 c0       	rjmp	.+0      	; 0x66a <GetDato+0x2e>
 66a:	00 00       	nop
	_delay_ms(20);      // Se pone un valor 0 por 20 ms
	PORTC |= (1<<PINC0);// Se pone un valor 1
 66c:	88 b1       	in	r24, 0x08	; 8
 66e:	81 60       	ori	r24, 0x01	; 1
 670:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1<<PINC0);// Se establece el PINC0 como entrada
 672:	87 b1       	in	r24, 0x07	; 7
 674:	8e 7f       	andi	r24, 0xFE	; 254
 676:	87 b9       	out	0x07, r24	; 7
	
	while (PINC & (1<<PINC0)){// Se espera el pull down del sensor
 678:	30 99       	sbic	0x06, 0	; 6
 67a:	fe cf       	rjmp	.-4      	; 0x678 <GetDato+0x3c>
		
	}
	while (!(PINC & (1<<PINC0))){// Se espera el pull up del sensor
 67c:	30 9b       	sbis	0x06, 0	; 6
 67e:	fe cf       	rjmp	.-4      	; 0x67c <GetDato+0x40>
		
	}
	while (PINC & (1<<PINC0)){// Se espera el pull down del sensor
 680:	30 99       	sbic	0x06, 0	; 6
 682:	fe cf       	rjmp	.-4      	; 0x680 <GetDato+0x44>
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	dc 01       	movw	r26, r24
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	11 c0       	rjmp	.+34     	; 0x6b0 <GetDato+0x74>
		
	}
	// Comienza la transmision
	
	for(i=0;i<32;i++){
		while (!(PINC & (1<<PINC0))){ // Tiempo de espera inicial a cada bit
 68e:	30 9b       	sbis	0x06, 0	; 6
 690:	fe cf       	rjmp	.-4      	; 0x68e <GetDato+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 692:	30 ea       	ldi	r19, 0xA0	; 160
 694:	3a 95       	dec	r19
 696:	f1 f7       	brne	.-4      	; 0x694 <GetDato+0x58>
			
		}
		_delay_us(30);
		res |= (PINC & (1<<PINC0));
 698:	36 b1       	in	r19, 0x06	; 6
 69a:	31 70       	andi	r19, 0x01	; 1
 69c:	83 2b       	or	r24, r19
		if(i!=31){
 69e:	2f 31       	cpi	r18, 0x1F	; 31
 6a0:	21 f0       	breq	.+8      	; 0x6aa <GetDato+0x6e>
			res <<= 1;
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
		}
		while (PINC & (1<<PINC0));
 6aa:	30 99       	sbic	0x06, 0	; 6
 6ac:	fe cf       	rjmp	.-4      	; 0x6aa <GetDato+0x6e>
	while (PINC & (1<<PINC0)){// Se espera el pull down del sensor
		
	}
	// Comienza la transmision
	
	for(i=0;i<32;i++){
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	20 32       	cpi	r18, 0x20	; 32
 6b2:	6c f3       	brlt	.-38     	; 0x68e <GetDato+0x52>
// 		}
		
	}
	
	return res;
}
 6b4:	bc 01       	movw	r22, r24
 6b6:	cd 01       	movw	r24, r26
 6b8:	08 95       	ret

000006ba <__vector_14>:
static uint8_t FLAG_F=0, FLAG_COUNTING=0;
static uint8_t cuentaF=0, flag_top=0;
static uint16_t cuentaT=0;
static uint32_t cuentaC=0, init_count=0;

ISR(TIMER0_COMPA_vect) { // Rutina de servicio a interrupcion
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	af 93       	push	r26
 6ca:	bf 93       	push	r27
	init_count++; // Se incrementa el tiempo global
 6cc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 6d0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 6d4:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__data_end+0x2>
 6d8:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__data_end+0x3>
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	a1 1d       	adc	r26, r1
 6e0:	b1 1d       	adc	r27, r1
 6e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 6e6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 6ea:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__data_end+0x2>
 6ee:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__data_end+0x3>
	cuentaF++; //Se incrementa el contador para el flag F
 6f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cuentaF>
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cuentaF>
	if (cuentaF == flag_top){ // Si se llego al limite para el flag F
 6fc:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <flag_top>
 700:	89 13       	cpse	r24, r25
 702:	05 c0       	rjmp	.+10     	; 0x70e <__vector_14+0x54>
		FLAG_F = 1; // Se indica que ya se llego al limite
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <FLAG_F>
		cuentaF = 0; // Se reinicia la cuenta para el flag F
 70a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cuentaF>
	}
	if (FLAG_COUNTING){ // Si se esta contando
 70e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <FLAG_COUNTING>
 712:	88 23       	and	r24, r24
 714:	99 f0       	breq	.+38     	; 0x73c <__vector_14+0x82>
		cuentaC++; // Se aumenta el cronometro
 716:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cuentaC>
 71a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cuentaC+0x1>
 71e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <cuentaC+0x2>
 722:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <cuentaC+0x3>
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	a1 1d       	adc	r26, r1
 72a:	b1 1d       	adc	r27, r1
 72c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cuentaC>
 730:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cuentaC+0x1>
 734:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <cuentaC+0x2>
 738:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <cuentaC+0x3>
	}
	if (cuentaT){ // Si todavia no termino el temporizador
 73c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cuentaT>
 740:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cuentaT+0x1>
 744:	00 97       	sbiw	r24, 0x00	; 0
 746:	29 f0       	breq	.+10     	; 0x752 <__vector_14+0x98>
		cuentaT--; // Se decrementa el contador
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cuentaT+0x1>
 74e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cuentaT>
	}
}
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <__divmodhi4>:
 764:	97 fb       	bst	r25, 7
 766:	07 2e       	mov	r0, r23
 768:	16 f4       	brtc	.+4      	; 0x76e <__divmodhi4+0xa>
 76a:	00 94       	com	r0
 76c:	07 d0       	rcall	.+14     	; 0x77c <__divmodhi4_neg1>
 76e:	77 fd       	sbrc	r23, 7
 770:	09 d0       	rcall	.+18     	; 0x784 <__divmodhi4_neg2>
 772:	0e 94 c6 03 	call	0x78c	; 0x78c <__udivmodhi4>
 776:	07 fc       	sbrc	r0, 7
 778:	05 d0       	rcall	.+10     	; 0x784 <__divmodhi4_neg2>
 77a:	3e f4       	brtc	.+14     	; 0x78a <__divmodhi4_exit>

0000077c <__divmodhi4_neg1>:
 77c:	90 95       	com	r25
 77e:	81 95       	neg	r24
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	08 95       	ret

00000784 <__divmodhi4_neg2>:
 784:	70 95       	com	r23
 786:	61 95       	neg	r22
 788:	7f 4f       	sbci	r23, 0xFF	; 255

0000078a <__divmodhi4_exit>:
 78a:	08 95       	ret

0000078c <__udivmodhi4>:
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	51 e1       	ldi	r21, 0x11	; 17
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <__udivmodhi4_ep>

00000794 <__udivmodhi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	a6 17       	cp	r26, r22
 79a:	b7 07       	cpc	r27, r23
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <__udivmodhi4_ep>
 79e:	a6 1b       	sub	r26, r22
 7a0:	b7 0b       	sbc	r27, r23

000007a2 <__udivmodhi4_ep>:
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	5a 95       	dec	r21
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__udivmodhi4_loop>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	bc 01       	movw	r22, r24
 7b0:	cd 01       	movw	r24, r26
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
